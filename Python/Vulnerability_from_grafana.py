import http.client
import json
import time
import urllib.parse
from html.parser import HTMLParser

# Configurations
GRAFANA_HOST = "your-grafana-instance.com"
GRAFANA_API = "/api/search"
LDAP_USERNAME = "your-ldap-username"
LDAP_PASSWORD = "your-ldap-password"
FILTER_APPLICATION = "NomDeLApplication"
GOOGLE_SEARCH_URL = "www.google.com"

# Fonction pour envoyer une requête HTTP POST (Authentification)
def authenticate():
    print("Authentification via SSO...")
    
    conn = http.client.HTTPSConnection(GRAFANA_HOST)
    headers = {"Content-Type": "application/json"}
    payload = json.dumps({"user": LDAP_USERNAME, "password": LDAP_PASSWORD})
    
    conn.request("POST", "/login", body=payload, headers=headers)
    response = conn.getresponse()
    data = response.read().decode()
    conn.close()

    if response.status == 200:
        token = json.loads(data).get("token")
        print("Authentification réussie. Token récupéré.")
        return token
    else:
        print(f"Échec de l'authentification: {data}")
        return None

# Fonction pour récupérer les vulnérabilités depuis Grafana
def get_vulnerabilities(token):
    print(f"Récupération des vulnérabilités pour l'application : {FILTER_APPLICATION}...")

    conn = http.client.HTTPSConnection(GRAFANA_HOST)
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    
    conn.request("GET", f"{GRAFANA_API}?query={FILTER_APPLICATION}", headers=headers)
    response = conn.getresponse()
    data = response.read().decode()
    conn.close()

    if response.status == 200:
        vulnerabilities = json.loads(data)
        if vulnerabilities:
            print(f"{len(vulnerabilities)} vulnérabilité(s) trouvée(s).")
            return vulnerabilities
        else:
            print("Aucune vulnérabilité trouvée.")
            return []
    else:
        print(f"Erreur lors de la récupération des vulnérabilités: {data}")
        return []

# Sauvegarde des vulnérabilités dans un fichier JSON
def save_to_json(vulnerabilities, filename="vulnerabilities.json"):
    with open(filename, "w", encoding="utf-8") as file:
        json.dump(vulnerabilities, file, indent=4, ensure_ascii=False)
    print(f"Vulnérabilités enregistrées dans {filename}.")

# Parser HTML pour extraire les liens Google
class GoogleParser(HTMLParser):
    def __init__(self):
        super().__init__()
        self.links = []

    def handle_starttag(self, tag, attrs):
        if tag == "a":
            for attr in attrs:
                if attr[0] == "href" and "url?q=" in attr[1]:
                    link = attr[1].split("url?q=")[1].split("&")[0]
                    if "http" in link:
                        self.links.append(link)

    def get_first_link(self):
        return self.links[0] if self.links else "Aucun lien trouvé"

# Recherche Google pour un plan de remédiation
def search_remediation(summary):
    print(f"Recherche du plan de remédiation pour : {summary}...")

    search_query = urllib.parse.quote(f"remédiation {summary}")
    conn = http.client.HTTPSConnection(GOOGLE_SEARCH_URL)
    headers = {"User-Agent": "Mozilla/5.0"}

    conn.request("GET", f"/search?q={search_query}", headers=headers)
    response = conn.getresponse()
    data = response.read().decode()
    conn.close()

    if response.status == 200:
        parser = GoogleParser()
        parser.feed(data)
        link = parser.get_first_link()
        print(f"Plan de remédiation trouvé: {link}")
        return link
    else:
        print("Échec de la recherche Google.")
        return None

# Enrichir le fichier JSON avec le plan de remédiation
def enrich_with_remediation(filename="vulnerabilities.json"):
    with open(filename, "r", encoding="utf-8") as file:
        vulnerabilities = json.load(file)

    for vulnerability in vulnerabilities:
        summary = vulnerability.get("summary")
        if summary:
            remediation_link = search_remediation(summary)
            if remediation_link:
                vulnerability["remediation"] = remediation_link
            time.sleep(2)  # Pause pour éviter les restrictions Google

    with open(filename, "w", encoding="utf-8") as file:
        json.dump(vulnerabilities, file, indent=4, ensure_ascii=False)

    print("Les vulnérabilités ont été enrichies avec des plans de remédiation.")

# Exécution du script
if __name__ == "__main__":
    token = authenticate()
    if token:
        vulnerabilities = get_vulnerabilities(token)
        if vulnerabilities:
            save_to_json(vulnerabilities)
            enrich_with_remediation()
